//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.17929
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Draghts.DraughtsServiceReference {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Player", Namespace="http://schemas.datacontract.org/2004/07/Draught")]
    [System.SerializableAttribute()]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Draghts.DraughtsServiceReference.Player[]))]
    public partial class Player : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private object PortalCallBackField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool loggedInField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Draghts.DraughtsServiceReference.Player opponentField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string passwordField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string userNameField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public object PortalCallBack {
            get {
                return this.PortalCallBackField;
            }
            set {
                if ((object.ReferenceEquals(this.PortalCallBackField, value) != true)) {
                    this.PortalCallBackField = value;
                    this.RaisePropertyChanged("PortalCallBack");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool loggedIn {
            get {
                return this.loggedInField;
            }
            set {
                if ((this.loggedInField.Equals(value) != true)) {
                    this.loggedInField = value;
                    this.RaisePropertyChanged("loggedIn");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Draghts.DraughtsServiceReference.Player opponent {
            get {
                return this.opponentField;
            }
            set {
                if ((object.ReferenceEquals(this.opponentField, value) != true)) {
                    this.opponentField = value;
                    this.RaisePropertyChanged("opponent");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string password {
            get {
                return this.passwordField;
            }
            set {
                if ((object.ReferenceEquals(this.passwordField, value) != true)) {
                    this.passwordField = value;
                    this.RaisePropertyChanged("password");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string userName {
            get {
                return this.userNameField;
            }
            set {
                if ((object.ReferenceEquals(this.userNameField, value) != true)) {
                    this.userNameField = value;
                    this.RaisePropertyChanged("userName");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(Namespace="Draught", ConfigurationName="DraughtsServiceReference.IPortal", CallbackContract=typeof(Draghts.DraughtsServiceReference.IPortalCallback))]
    public interface IPortal {
        
        [System.ServiceModel.OperationContractAttribute(Action="Draught/IPortal/signUp", ReplyAction="Draught/IPortal/signUpResponse")]
        bool signUp(string userName, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="Draught/IPortal/signUp", ReplyAction="Draught/IPortal/signUpResponse")]
        System.Threading.Tasks.Task<bool> signUpAsync(string userName, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="Draught/IPortal/logIn", ReplyAction="Draught/IPortal/logInResponse")]
        bool logIn(string userName, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="Draught/IPortal/logIn", ReplyAction="Draught/IPortal/logInResponse")]
        System.Threading.Tasks.Task<bool> logInAsync(string userName, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="Draught/IPortal/Invite", ReplyAction="Draught/IPortal/InviteResponse")]
        bool Invite(string sender, string recipient);
        
        [System.ServiceModel.OperationContractAttribute(Action="Draught/IPortal/Invite", ReplyAction="Draught/IPortal/InviteResponse")]
        System.Threading.Tasks.Task<bool> InviteAsync(string sender, string recipient);
        
        [System.ServiceModel.OperationContractAttribute(Action="Draught/IPortal/logOut", ReplyAction="Draught/IPortal/logOutResponse")]
        void logOut();
        
        [System.ServiceModel.OperationContractAttribute(Action="Draught/IPortal/logOut", ReplyAction="Draught/IPortal/logOutResponse")]
        System.Threading.Tasks.Task logOutAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="Draught/IPortal/Subscribe", ReplyAction="Draught/IPortal/SubscribeResponse")]
        void Subscribe();
        
        [System.ServiceModel.OperationContractAttribute(Action="Draught/IPortal/Subscribe", ReplyAction="Draught/IPortal/SubscribeResponse")]
        System.Threading.Tasks.Task SubscribeAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="Draught/IPortal/GetlistOfPlayers", ReplyAction="Draught/IPortal/GetlistOfPlayersResponse")]
        Draghts.DraughtsServiceReference.Player[] GetlistOfPlayers();
        
        [System.ServiceModel.OperationContractAttribute(Action="Draught/IPortal/GetlistOfPlayers", ReplyAction="Draught/IPortal/GetlistOfPlayersResponse")]
        System.Threading.Tasks.Task<Draghts.DraughtsServiceReference.Player[]> GetlistOfPlayersAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="Draught/IPortal/setOpponent", ReplyAction="Draught/IPortal/setOpponentResponse")]
        void setOpponent(string userName);
        
        [System.ServiceModel.OperationContractAttribute(Action="Draught/IPortal/setOpponent", ReplyAction="Draught/IPortal/setOpponentResponse")]
        System.Threading.Tasks.Task setOpponentAsync(string userName);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IPortalCallback {
        
        [System.ServiceModel.OperationContractAttribute(Action="Draught/IPortal/OnInvitation", ReplyAction="Draught/IPortal/OnInvitationResponse")]
        bool OnInvitation(string sender, Draghts.DraughtsServiceReference.Player recipient);
        
        [System.ServiceModel.OperationContractAttribute(Action="Draught/IPortal/OnLoggingInOrOut1", ReplyAction="Draught/IPortal/OnLoggingInOrOut1Response")]
        void OnLoggingInOrOut1(Draghts.DraughtsServiceReference.Player[] loggedInList);
        
        [System.ServiceModel.OperationContractAttribute(Action="Draught/IPortal/loadGame", ReplyAction="Draught/IPortal/loadGameResponse")]
        void loadGame();
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IPortalChannel : Draghts.DraughtsServiceReference.IPortal, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class PortalClient : System.ServiceModel.DuplexClientBase<Draghts.DraughtsServiceReference.IPortal>, Draghts.DraughtsServiceReference.IPortal {
        
        public PortalClient(System.ServiceModel.InstanceContext callbackInstance) : 
                base(callbackInstance) {
        }
        
        public PortalClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName) : 
                base(callbackInstance, endpointConfigurationName) {
        }
        
        public PortalClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, string remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public PortalClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public PortalClient(System.ServiceModel.InstanceContext callbackInstance, System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, binding, remoteAddress) {
        }
        
        public bool signUp(string userName, string password) {
            return base.Channel.signUp(userName, password);
        }
        
        public System.Threading.Tasks.Task<bool> signUpAsync(string userName, string password) {
            return base.Channel.signUpAsync(userName, password);
        }
        
        public bool logIn(string userName, string password) {
            return base.Channel.logIn(userName, password);
        }
        
        public System.Threading.Tasks.Task<bool> logInAsync(string userName, string password) {
            return base.Channel.logInAsync(userName, password);
        }
        
        public bool Invite(string sender, string recipient) {
            return base.Channel.Invite(sender, recipient);
        }
        
        public System.Threading.Tasks.Task<bool> InviteAsync(string sender, string recipient) {
            return base.Channel.InviteAsync(sender, recipient);
        }
        
        public void logOut() {
            base.Channel.logOut();
        }
        
        public System.Threading.Tasks.Task logOutAsync() {
            return base.Channel.logOutAsync();
        }
        
        public void Subscribe() {
            base.Channel.Subscribe();
        }
        
        public System.Threading.Tasks.Task SubscribeAsync() {
            return base.Channel.SubscribeAsync();
        }
        
        public Draghts.DraughtsServiceReference.Player[] GetlistOfPlayers() {
            return base.Channel.GetlistOfPlayers();
        }
        
        public System.Threading.Tasks.Task<Draghts.DraughtsServiceReference.Player[]> GetlistOfPlayersAsync() {
            return base.Channel.GetlistOfPlayersAsync();
        }
        
        public void setOpponent(string userName) {
            base.Channel.setOpponent(userName);
        }
        
        public System.Threading.Tasks.Task setOpponentAsync(string userName) {
            return base.Channel.setOpponentAsync(userName);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(Namespace="Draught", ConfigurationName="DraughtsServiceReference.IGamePlay")]
    public interface IGamePlay {
        
        [System.ServiceModel.OperationContractAttribute(Action="Draught/IGamePlay/sendMessage", ReplyAction="Draught/IGamePlay/sendMessageResponse")]
        bool sendMessage(string recipient, string message);
        
        [System.ServiceModel.OperationContractAttribute(Action="Draught/IGamePlay/sendMessage", ReplyAction="Draught/IGamePlay/sendMessageResponse")]
        System.Threading.Tasks.Task<bool> sendMessageAsync(string recipient, string message);
        
        [System.ServiceModel.OperationContractAttribute(Action="Draught/IGamePlay/makeMove", ReplyAction="Draught/IGamePlay/makeMoveResponse")]
        bool makeMove(int x, int y);
        
        [System.ServiceModel.OperationContractAttribute(Action="Draught/IGamePlay/makeMove", ReplyAction="Draught/IGamePlay/makeMoveResponse")]
        System.Threading.Tasks.Task<bool> makeMoveAsync(int x, int y);
        
        [System.ServiceModel.OperationContractAttribute(Action="Draught/IGamePlay/quitGame", ReplyAction="Draught/IGamePlay/quitGameResponse")]
        void quitGame();
        
        [System.ServiceModel.OperationContractAttribute(Action="Draught/IGamePlay/quitGame", ReplyAction="Draught/IGamePlay/quitGameResponse")]
        System.Threading.Tasks.Task quitGameAsync();
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IGamePlayChannel : Draghts.DraughtsServiceReference.IGamePlay, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GamePlayClient : System.ServiceModel.ClientBase<Draghts.DraughtsServiceReference.IGamePlay>, Draghts.DraughtsServiceReference.IGamePlay {
        
        public GamePlayClient() {
        }
        
        public GamePlayClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public GamePlayClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public GamePlayClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public GamePlayClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public bool sendMessage(string recipient, string message) {
            return base.Channel.sendMessage(recipient, message);
        }
        
        public System.Threading.Tasks.Task<bool> sendMessageAsync(string recipient, string message) {
            return base.Channel.sendMessageAsync(recipient, message);
        }
        
        public bool makeMove(int x, int y) {
            return base.Channel.makeMove(x, y);
        }
        
        public System.Threading.Tasks.Task<bool> makeMoveAsync(int x, int y) {
            return base.Channel.makeMoveAsync(x, y);
        }
        
        public void quitGame() {
            base.Channel.quitGame();
        }
        
        public System.Threading.Tasks.Task quitGameAsync() {
            return base.Channel.quitGameAsync();
        }
    }
}
